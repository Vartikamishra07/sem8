#include<iostream>
#include<omp.h>
#include<bits/stdc++.h>
using namespace std;
using namespace std::chrono;


class Graph{
    public:
        int vertices ;
        int edges ;
        vector<vector<int>> graph ;
        vector<bool> visited;

        void addEdge(int a, int b){
            graph[a].push_back(b);
            graph[b].push_back(a);
        }

        void printGraph(){
            for(int i = 0; i < vertices; i++){
                cout << i << " -> ";
                for(auto j = graph[i].begin(); j != graph[i].end();j++){
                    cout << *j << " ";
                }
                cout << endl;
            }
        }

        void initialize_visited(){
            visited.assign(vertices,false);
        }

        void dfs(int i){
            stack<int> s;
            s.push(i);
            visited[i] = true;

            while(s.empty() != true){
                int current = s.top();
                cout << current << " ";
                s.pop();
                for(auto j = graph[current].begin(); j != graph[current].end();j++){
                    if(visited[*j] == false){
                        s.push(*j);
                        visited[*j] = true;
                    }
                }
                
            }
        }

        void parallel_dfs(int i){
            stack<int> s;
            s.push(i);
            visited[i] = true;

            while(s.empty() != true){
                int current = s.top();
                cout << current << " ";
                #pragma omp critical
                    s.pop();
                #pragma omp parallel for
                    for(auto j = graph[current].begin(); j != graph[current].end();j++){
                        if(visited[*j] == false){
                            #pragma omp critical
                            {
                                s.push(*j);
                                visited[*j] = true;
                            }
                        }
                    }
                
            }
        }

        void bfs(int i){
            queue<int> q;
            q.push(i);
            visited[i] = true;

            while(q.empty() != true){
                int current = q.front();
                q.pop();
                cout << current << " ";
                for(auto j = graph[current].begin(); j != graph[current].end();j++){
                    if(visited[*j] == false){
                        q.push(*j);
                        visited[*j] = true;
                    }
                }
            }
        }

        void parallel_bfs(int i){
            queue<int> q;
            q.push(i);
            visited[i] = true;

            while(q.empty() != true){
                
                    int current = q.front();
                    cout << current << " ";
                    #pragma omp critical
                    q.pop();
                    
                #pragma omp parallel for
                    for(auto j = graph[current].begin(); j != graph[current].end();j++){
                        if(visited[*j] == false){
                            #pragma omp critical
                                q.push(*j);
                                visited[*j] = true;
                        }
                    }
            }
        }
};

int main()
{
    Graph g;

    // ðŸ‘‡ User input for graph
    cout << "Enter number of vertices: ";
    cin >> g.vertices;

    cout << "Enter number of edges: ";
    cin >> g.edges;

    // Resize graph and visited vector accordingly
    g.graph.clear();
    g.graph.resize(g.vertices);
    g.visited.resize(g.vertices, false);

    cout << "Enter " << g.edges << " edges (u v):" << endl;
    for (int i = 0; i < g.edges; i++) {
        int u, v;
        cin >> u >> v;
        g.addEdge(u, v);
    }

    cout << "Adjacency List:\n";
    g.printGraph();

    //time taken for dfs
    g.initialize_visited();
    cout << "Depth First Search: \n";
    double start = omp_get_wtime();
    g.dfs(0);
    cout << endl;
    double end =  omp_get_wtime();
    cout << "Time taken: " <<end - start << " microseconds" << endl;

    cout << "Parallel Depth First Search: \n";
    g.initialize_visited();
    start =  omp_get_wtime();
    g.parallel_dfs(0);
    cout << endl;
    end =  omp_get_wtime();
    cout << "Time taken: "<<end - start << " microseconds" << endl;

    //time taken for bfs
    cout << "Breadth First Search: \n";
    g.initialize_visited();
    start =  omp_get_wtime();
    g.bfs(0);
    cout << endl;
    end = omp_get_wtime();
    cout << "Time taken: "<< end - start<< " microseconds" << endl;

    cout << "Parallel Breadth First Search: \n";
    g.initialize_visited();
    start =  omp_get_wtime();
    g.parallel_bfs(0);
    cout << endl;
    end =  omp_get_wtime();
    cout << "Time taken: " << end - start<< " microseconds" << endl;

    return 0;
}






#include<iostream>
#include<omp.h>
#include<bits/stdc++.h>
using namespace std;

class Graph{
    public:
        int vertices ;
        vector<vector<int>> graph ;
        vector<bool> visited;

        Graph(int vertices)
        {
           this->vertices=vertices;
           graph.resize(vertices);
        }

        void addEdge(int a, int b)
        {
            graph[a].push_back(b);
            graph[b].push_back(a);
        }

        void printGraph()
        {
            for(int i = 0; i < vertices; i++){
                cout << i << " -> ";
                for(auto j = graph[i].begin(); j != graph[i].end();j++){
                    cout << *j << " ";
                }
                cout << endl;
            }
        }

        void initialize_visited(){
            visited.assign(vertices,false);
        }

        void dfs(int i){
            stack<int> s;
            s.push(i);
            visited[i] = true;

            while(s.empty() != true){
                int current = s.top();
                cout << current << " ";
                s.pop();
                for(auto j = graph[current].begin(); j != graph[current].end();j++){
                    if(visited[*j] == false){
                        s.push(*j);
                        visited[*j] = true;
                    }
                }
                
            }
        }

        void parallel_dfs(int i){
            stack<int> s;
            s.push(i);
            visited[i] = true;

            while(s.empty() != true){
                int current = s.top();
                cout << current << " ";
                #pragma omp critical
                    s.pop();
                #pragma omp parallel for
                    for(auto j = graph[current].begin(); j != graph[current].end();j++){
                        if(visited[*j] == false){
                            #pragma omp critical
                            {
                                s.push(*j);
                                visited[*j] = true;
                            }
                        }
                    }
                
            }
        }

        void bfs(int i){
            queue<int> q;
            q.push(i);
            visited[i] = true;

            while(q.empty() != true){
                int current = q.front();
                q.pop();
                cout << current << " ";
                for(auto j = graph[current].begin(); j != graph[current].end();j++){
                    if(visited[*j] == false){
                        q.push(*j);
                        visited[*j] = true;
                    }
                }
            }
        }

        void parallel_bfs(int i){
            queue<int> q;
            q.push(i);
            visited[i] = true;

            while(q.empty() != true){
                
                    int current = q.front();
                    cout << current << " ";
                    #pragma omp critical
                    q.pop();
                    
                #pragma omp parallel for
                    for(auto j = graph[current].begin(); j != graph[current].end();j++){
                        if(visited[*j] == false){
                            #pragma omp critical
                                q.push(*j);
                                visited[*j] = true;
                        }
                    }
            }
        }
};

int main()
{
    double start , end;
    Graph g(5);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(0, 3);
    g.addEdge(2, 1);
    g.addEdge(2, 4);
    
    cout << "Adjacency List:\n";
    g.printGraph();

    //time taken for dfs
    g.initialize_visited();
    cout << "Depth First Search: \n";
    start = omp_get_wtime();
    g.dfs(0);
    cout << endl;
    end =  omp_get_wtime();
    cout << "Time taken: " <<end - start << " microseconds" << endl;

    cout << "Parallel Depth First Search: \n";
    g.initialize_visited();
    start =  omp_get_wtime();
    g.parallel_dfs(0);
    cout << endl;
    end =  omp_get_wtime();
    cout << "Time taken: "<<end - start << " microseconds" << endl;

    //time taken for bfs
    cout << "Breadth First Search: \n";
    g.initialize_visited();
    start =  omp_get_wtime();
    g.bfs(0);
    cout << endl;
    end = omp_get_wtime();
    cout << "Time taken: "<< end - start<< " microseconds" << endl;

    cout << "Parallel Breadth First Search: \n";
    g.initialize_visited();
    start =  omp_get_wtime();
    g.parallel_bfs(0);
    cout << endl;
    end =  omp_get_wtime();
    cout << "Time taken: " << end - start<< " microseconds" << endl;

    return 0;
}