1.import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
from sklearn.metrics import mean_absolute_error, mean_squared_error 

2.df = pd.read_csv("goog.csv")
  df
  df.head()

3.plt.plot(df['Close'])

4.scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(np.array(df['Close']).reshape(-1,1))

5.training_size = int(len(scaled_data)*0.8)
train_data = scaled_data[:training_size]
test_data = scaled_data[training_size:]


6.len(train_data), len(test_data)

7.def create_dataset(data, step=4):
  x = []
  y = []
  for i in range(len(data) - step):
    x.append(data[i:i+step, 0])
    y.append(data[i+step, 0])

  return np.array(x), np.array(y)

x_train, y_train = create_dataset(train_data)
x_test, y_test = create_dataset(test_data)

# basically if dataset is [123 124 125 124 123 125 127]
# Independent 4 days  -> next day dependent
# s1  s1  s2  s3  y
# 123 124 125 124 123
# 124 125 124 123 125
# 125 124 123 125 127

# x contains the input sequences (e.g., stock prices over the past step days).
# y contains the corresponding target values (the stock price for the next day).

8.model = Sequential()

model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1] , 1)))
model.add(LSTM(50))
model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mse')
model.summary()


9.model.fit(x_train, y_train, epochs=50)

10.metrics = model.evaluate(x_test, y_test)
metrics

11.y_pred = model.predict(x_test)
y_pred = scaler.inverse_transform(y_pred)
y_test = scaler.inverse_transform(y_test.reshape(-1,1))

12.mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
print('MAE: ', mae)
print('MSE: ', mse)
print('RMSE: ', rmse)

13.plt.plot(y_test, label='Actual Price')
plt.plot(y_pred, label='Predicted Price')
plt.title('Actual vs Predicted Price')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()